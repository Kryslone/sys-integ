{"ast":null,"code":"const fetchMeetingNotes = async () => {\n  try {\n    const response = await getNotes();\n    const allNotes = response.data;\n\n    // Filter for isMinute and isApproved\n    const approvedNotes = allNotes.filter(note => note.isMinute && note.isApproved);\n\n    // Fetch ticket statuses for all notes\n    const notesWithStatus = await Promise.all(approvedNotes.map(async note => {\n      try {\n        const res = await getTicketStatus(note._id);\n        return {\n          ...note,\n          ticketStatus: res.data.status // Adjust if your API returns a different field\n        };\n      } catch (err) {\n        console.error(`Error fetching ticket status for ${note._id}:`, err);\n        return {\n          ...note,\n          ticketStatus: 'Unavailable'\n        };\n      }\n    }));\n\n    // Now optionally filter notes by status if needed\n    // For example: only include notes with ticketStatus = 'Active'\n    const finalNotes = notesWithStatus.filter(note => note.ticketStatus !== 'Cancelled');\n    setMeetingNotes(finalNotes);\n\n    // Optionally, build a map of statuses if you still need quick lookup\n    const statusMap = {};\n    finalNotes.forEach(note => {\n      statusMap[note._id] = note.ticketStatus;\n    });\n    setTicketStatuses(statusMap);\n  } catch (err) {\n    console.error('Error fetching notes:', err);\n  }\n};","map":{"version":3,"names":["fetchMeetingNotes","response","getNotes","allNotes","data","approvedNotes","filter","note","isMinute","isApproved","notesWithStatus","Promise","all","map","res","getTicketStatus","_id","ticketStatus","status","err","console","error","finalNotes","setMeetingNotes","statusMap","forEach","setTicketStatuses"],"sources":["C:/Users/HP/sys_integ/frontend/src/pages/meetings/meeting_screen.js"],"sourcesContent":["const fetchMeetingNotes = async () => {\r\n  try {\r\n    const response = await getNotes();\r\n    const allNotes = response.data;\r\n\r\n    // Filter for isMinute and isApproved\r\n    const approvedNotes = allNotes.filter(note => note.isMinute && note.isApproved);\r\n\r\n    // Fetch ticket statuses for all notes\r\n    const notesWithStatus = await Promise.all(\r\n      approvedNotes.map(async (note) => {\r\n        try {\r\n          const res = await getTicketStatus(note._id);\r\n          return {\r\n            ...note,\r\n            ticketStatus: res.data.status, // Adjust if your API returns a different field\r\n          };\r\n        } catch (err) {\r\n          console.error(`Error fetching ticket status for ${note._id}:`, err);\r\n          return {\r\n            ...note,\r\n            ticketStatus: 'Unavailable',\r\n          };\r\n        }\r\n      })\r\n    );\r\n\r\n    // Now optionally filter notes by status if needed\r\n    // For example: only include notes with ticketStatus = 'Active'\r\n    const finalNotes = notesWithStatus.filter(note => note.ticketStatus !== 'Cancelled');\r\n\r\n    setMeetingNotes(finalNotes);\r\n\r\n    // Optionally, build a map of statuses if you still need quick lookup\r\n    const statusMap = {};\r\n    finalNotes.forEach(note => {\r\n      statusMap[note._id] = note.ticketStatus;\r\n    });\r\n    setTicketStatuses(statusMap);\r\n\r\n  } catch (err) {\r\n    console.error('Error fetching notes:', err);\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,QAAQ,CAAC,CAAC;IACjC,MAAMC,QAAQ,GAAGF,QAAQ,CAACG,IAAI;;IAE9B;IACA,MAAMC,aAAa,GAAGF,QAAQ,CAACG,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,QAAQ,IAAID,IAAI,CAACE,UAAU,CAAC;;IAE/E;IACA,MAAMC,eAAe,GAAG,MAAMC,OAAO,CAACC,GAAG,CACvCP,aAAa,CAACQ,GAAG,CAAC,MAAON,IAAI,IAAK;MAChC,IAAI;QACF,MAAMO,GAAG,GAAG,MAAMC,eAAe,CAACR,IAAI,CAACS,GAAG,CAAC;QAC3C,OAAO;UACL,GAAGT,IAAI;UACPU,YAAY,EAAEH,GAAG,CAACV,IAAI,CAACc,MAAM,CAAE;QACjC,CAAC;MACH,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,oCAAoCd,IAAI,CAACS,GAAG,GAAG,EAAEG,GAAG,CAAC;QACnE,OAAO;UACL,GAAGZ,IAAI;UACPU,YAAY,EAAE;QAChB,CAAC;MACH;IACF,CAAC,CACH,CAAC;;IAED;IACA;IACA,MAAMK,UAAU,GAAGZ,eAAe,CAACJ,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACU,YAAY,KAAK,WAAW,CAAC;IAEpFM,eAAe,CAACD,UAAU,CAAC;;IAE3B;IACA,MAAME,SAAS,GAAG,CAAC,CAAC;IACpBF,UAAU,CAACG,OAAO,CAAClB,IAAI,IAAI;MACzBiB,SAAS,CAACjB,IAAI,CAACS,GAAG,CAAC,GAAGT,IAAI,CAACU,YAAY;IACzC,CAAC,CAAC;IACFS,iBAAiB,CAACF,SAAS,CAAC;EAE9B,CAAC,CAAC,OAAOL,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC;EAC7C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}